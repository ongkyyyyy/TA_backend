[
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "regex",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "models.diagram",
        "description": "models.diagram",
        "isExtraImport": true,
        "detail": "models.diagram",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "calendar",
        "description": "calendar",
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "dateutil.parser",
        "description": "dateutil.parser",
        "isExtraImport": true,
        "detail": "dateutil.parser",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "reviews_collection",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "save_sentiment_analysis",
        "importPath": "controllers.sentiments_controller",
        "description": "controllers.sentiments_controller",
        "isExtraImport": true,
        "detail": "controllers.sentiments_controller",
        "documentation": {}
    },
    {
        "label": "get_all_sentiments",
        "importPath": "controllers.sentiments_controller",
        "description": "controllers.sentiments_controller",
        "isExtraImport": true,
        "detail": "controllers.sentiments_controller",
        "documentation": {}
    },
    {
        "label": "analyze_sentiment",
        "importPath": "sentiment_analysis.sentiment_analysis",
        "description": "sentiment_analysis.sentiment_analysis",
        "isExtraImport": true,
        "detail": "sentiment_analysis.sentiment_analysis",
        "documentation": {}
    },
    {
        "label": "analyze_sentiment",
        "importPath": "sentiment_analysis.sentiment_analysis",
        "description": "sentiment_analysis.sentiment_analysis",
        "isExtraImport": true,
        "detail": "sentiment_analysis.sentiment_analysis",
        "documentation": {}
    },
    {
        "label": "sentiment_collection",
        "importPath": "models.sentiment",
        "description": "models.sentiment",
        "isExtraImport": true,
        "detail": "models.sentiment",
        "documentation": {}
    },
    {
        "label": "sentiment_collection",
        "importPath": "models.sentiment",
        "description": "models.sentiment",
        "isExtraImport": true,
        "detail": "models.sentiment",
        "documentation": {}
    },
    {
        "label": "detect",
        "importPath": "langdetect",
        "description": "langdetect",
        "isExtraImport": true,
        "detail": "langdetect",
        "documentation": {}
    },
    {
        "label": "LangDetectException",
        "importPath": "langdetect",
        "description": "langdetect",
        "isExtraImport": true,
        "detail": "langdetect",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MONGO_URI",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "MONGO_URI",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "MONGO_URI",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "MONGO_URI",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "MONGO_URI",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "PyMongo",
        "importPath": "flask_pymongo",
        "description": "flask_pymongo",
        "isExtraImport": true,
        "detail": "flask_pymongo",
        "documentation": {}
    },
    {
        "label": "get_revenue_sentiment_diagram",
        "importPath": "controllers.diagram_controller",
        "description": "controllers.diagram_controller",
        "isExtraImport": true,
        "detail": "controllers.diagram_controller",
        "documentation": {}
    },
    {
        "label": "HotelController",
        "importPath": "controllers.hotel_controller",
        "description": "controllers.hotel_controller",
        "isExtraImport": true,
        "detail": "controllers.hotel_controller",
        "documentation": {}
    },
    {
        "label": "HotelsDB",
        "importPath": "models.hotels",
        "description": "models.hotels",
        "isExtraImport": true,
        "detail": "models.hotels",
        "documentation": {}
    },
    {
        "label": "hotels_collection",
        "importPath": "models.hotels",
        "description": "models.hotels",
        "isExtraImport": true,
        "detail": "models.hotels",
        "documentation": {}
    },
    {
        "label": "RevenueController",
        "importPath": "controllers.revenue_controller",
        "description": "controllers.revenue_controller",
        "isExtraImport": true,
        "detail": "controllers.revenue_controller",
        "documentation": {}
    },
    {
        "label": "RevenueDB",
        "importPath": "models.revenue",
        "description": "models.revenue",
        "isExtraImport": true,
        "detail": "models.revenue",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "save_reviews",
        "importPath": "controllers.review_controller",
        "description": "controllers.review_controller",
        "isExtraImport": true,
        "detail": "controllers.review_controller",
        "documentation": {}
    },
    {
        "label": "get_all_reviews",
        "importPath": "controllers.review_controller",
        "description": "controllers.review_controller",
        "isExtraImport": true,
        "detail": "controllers.review_controller",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "winreg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winreg",
        "description": "winreg",
        "detail": "winreg",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "create_revenue_blueprint",
        "importPath": "routes.revenue_routes",
        "description": "routes.revenue_routes",
        "isExtraImport": true,
        "detail": "routes.revenue_routes",
        "documentation": {}
    },
    {
        "label": "create_review_blueprint",
        "importPath": "routes.review_routes",
        "description": "routes.review_routes",
        "isExtraImport": true,
        "detail": "routes.review_routes",
        "documentation": {}
    },
    {
        "label": "create_sentiment_blueprint",
        "importPath": "routes.sentiment_routes",
        "description": "routes.sentiment_routes",
        "isExtraImport": true,
        "detail": "routes.sentiment_routes",
        "documentation": {}
    },
    {
        "label": "create_hotel_blueprint",
        "importPath": "routes.hotel_routes",
        "description": "routes.hotel_routes",
        "isExtraImport": true,
        "detail": "routes.hotel_routes",
        "documentation": {}
    },
    {
        "label": "create_diagram_blueprint",
        "importPath": "routes.diagram_routes",
        "description": "routes.diagram_routes",
        "isExtraImport": true,
        "detail": "routes.diagram_routes",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "get_month_key",
        "kind": 2,
        "importPath": "controllers.diagram_controller",
        "description": "controllers.diagram_controller",
        "peekOfCode": "def get_month_key(date):\n    if isinstance(date, str):\n        date = parse(date)\n    return date.strftime('%Y-%m')\ndef month_label(date_str):\n    dt = datetime.strptime(date_str, \"%Y-%m\")\n    return f\"{calendar.month_abbr[dt.month]} {dt.year}\"\ndef get_filter_year():\n    year = request.args.get('year')\n    return int(year) if year and year.isdigit() else None",
        "detail": "controllers.diagram_controller",
        "documentation": {}
    },
    {
        "label": "month_label",
        "kind": 2,
        "importPath": "controllers.diagram_controller",
        "description": "controllers.diagram_controller",
        "peekOfCode": "def month_label(date_str):\n    dt = datetime.strptime(date_str, \"%Y-%m\")\n    return f\"{calendar.month_abbr[dt.month]} {dt.year}\"\ndef get_filter_year():\n    year = request.args.get('year')\n    return int(year) if year and year.isdigit() else None\ndef get_revenue_sentiment_diagram():\n    hotel_id = request.args.get(\"hotel_id\", \"All\")\n    year = request.args.get(\"year\", type=int)\n    today = datetime.today()",
        "detail": "controllers.diagram_controller",
        "documentation": {}
    },
    {
        "label": "get_filter_year",
        "kind": 2,
        "importPath": "controllers.diagram_controller",
        "description": "controllers.diagram_controller",
        "peekOfCode": "def get_filter_year():\n    year = request.args.get('year')\n    return int(year) if year and year.isdigit() else None\ndef get_revenue_sentiment_diagram():\n    hotel_id = request.args.get(\"hotel_id\", \"All\")\n    year = request.args.get(\"year\", type=int)\n    today = datetime.today()\n    current_year = today.year\n    current_month = today.month\n    revenue_query = {}",
        "detail": "controllers.diagram_controller",
        "documentation": {}
    },
    {
        "label": "get_revenue_sentiment_diagram",
        "kind": 2,
        "importPath": "controllers.diagram_controller",
        "description": "controllers.diagram_controller",
        "peekOfCode": "def get_revenue_sentiment_diagram():\n    hotel_id = request.args.get(\"hotel_id\", \"All\")\n    year = request.args.get(\"year\", type=int)\n    today = datetime.today()\n    current_year = today.year\n    current_month = today.month\n    revenue_query = {}\n    if hotel_id != \"All\":\n        revenue_query[\"hotel_id\"] = ObjectId(hotel_id)\n    revenues = [",
        "detail": "controllers.diagram_controller",
        "documentation": {}
    },
    {
        "label": "HotelController",
        "kind": 6,
        "importPath": "controllers.hotel_controller",
        "description": "controllers.hotel_controller",
        "peekOfCode": "class HotelController:\n    def __init__(self, db):\n        self.db = db\n    def create_hotel(self):\n        data = request.json\n        required_fields = [\"hotel_name\", \"address\", \"city\", \"country\"]\n        if not all(field in data and data[field] for field in required_fields):\n            return jsonify({\"error\": \"Missing required field(s)\"}), 400\n        data.setdefault(\"agoda_link\", \"\")\n        data.setdefault(\"traveloka_link\", \"\")",
        "detail": "controllers.hotel_controller",
        "documentation": {}
    },
    {
        "label": "RevenueController",
        "kind": 6,
        "importPath": "controllers.revenue_controller",
        "description": "controllers.revenue_controller",
        "peekOfCode": "class RevenueController:\n    def __init__(self, db):\n        self.db = db\n    def get_revenues(self):\n        try:\n            revenues = self.db.get_all_revenues()\n            return jsonify({\"success\": True, \"data\": revenues}), 200\n        except Exception as e:\n            return jsonify({\"success\": False, \"error\": str(e)}), 500\n    def get_revenue(self, revenue_id):",
        "detail": "controllers.revenue_controller",
        "documentation": {}
    },
    {
        "label": "save_reviews",
        "kind": 2,
        "importPath": "controllers.review_controller",
        "description": "controllers.review_controller",
        "peekOfCode": "def save_reviews(reviews, hotel_id=None):  \n    if not reviews:\n        return {\"message\": \"No reviews to save\", \"status\": 400}\n    filters = [{\n        \"username\": r[\"username\"],\n        \"comment\": r[\"comment\"],\n        \"timestamp\": r[\"timestamp\"],\n        \"hotel_name\": r.get(\"hotel_name\", \"\"),\n        \"OTA\": r[\"OTA\"]\n    } for r in reviews]",
        "detail": "controllers.review_controller",
        "documentation": {}
    },
    {
        "label": "prepare_unicode_friendly_regex",
        "kind": 2,
        "importPath": "controllers.review_controller",
        "description": "controllers.review_controller",
        "peekOfCode": "def prepare_unicode_friendly_regex(text):\n    safe_text = re.escape(text)\n    safe_text = safe_text.replace('', '[\\u200B-\\u200D\\uFEFF]?')\n    return re.compile(safe_text, re.IGNORECASE)\ndef get_all_reviews():\n    page = int(request.args.get('page', 1))\n    per_page = 15\n    skip = (page - 1) * per_page\n    search_query = request.args.get('search', '').strip()\n    sentiment_filter = request.args.get('sentiment')",
        "detail": "controllers.review_controller",
        "documentation": {}
    },
    {
        "label": "get_all_reviews",
        "kind": 2,
        "importPath": "controllers.review_controller",
        "description": "controllers.review_controller",
        "peekOfCode": "def get_all_reviews():\n    page = int(request.args.get('page', 1))\n    per_page = 15\n    skip = (page - 1) * per_page\n    search_query = request.args.get('search', '').strip()\n    sentiment_filter = request.args.get('sentiment')\n    min_rating = request.args.get('min_rating', type=float)\n    max_rating = request.args.get('max_rating', type=float)\n    ota_filter = request.args.get('ota')\n    min_date = request.args.get('min_date')",
        "detail": "controllers.review_controller",
        "documentation": {}
    },
    {
        "label": "save_sentiment_analysis",
        "kind": 2,
        "importPath": "controllers.sentiments_controller",
        "description": "controllers.sentiments_controller",
        "peekOfCode": "def save_sentiment_analysis(sentiments):\n    if not sentiments:\n        return {\"message\": \"No sentiment data to save\", \"status\": 400}\n    sentiment_collection.insert_many(sentiments)\n    return {\"message\": \"Sentiment analysis saved successfully\", \"status\": 201}\ndef get_all_sentiments():\n    sentiments = list(sentiment_collection.find({}, {\"_id\": 0}))  \n    return sentiments",
        "detail": "controllers.sentiments_controller",
        "documentation": {}
    },
    {
        "label": "get_all_sentiments",
        "kind": 2,
        "importPath": "controllers.sentiments_controller",
        "description": "controllers.sentiments_controller",
        "peekOfCode": "def get_all_sentiments():\n    sentiments = list(sentiment_collection.find({}, {\"_id\": 0}))  \n    return sentiments",
        "detail": "controllers.sentiments_controller",
        "documentation": {}
    },
    {
        "label": "DiagramDB",
        "kind": 6,
        "importPath": "models.diagram",
        "description": "models.diagram",
        "peekOfCode": "class DiagramDB:\n    def __init__(self, app=None):\n        self.client = MongoClient(MONGO_URI)\n        self.db = self.client.hotelPerformance\n        self.hotels = self.db.hotels\n        self.revenues = self.db.revenues\n        self.reviews = self.db.reviews\n        self.sentiments = self.db.sentiments\ndb = DiagramDB()",
        "detail": "models.diagram",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "models.diagram",
        "description": "models.diagram",
        "peekOfCode": "db = DiagramDB()",
        "detail": "models.diagram",
        "documentation": {}
    },
    {
        "label": "HotelsDB",
        "kind": 6,
        "importPath": "models.hotels",
        "description": "models.hotels",
        "peekOfCode": "class HotelsDB:\n    def __init__(self, app=None):\n        self.client = MongoClient(MONGO_URI)\n        self.db = self.client.hotelPerformance\n        self.collection = self.db.hotels\n        self.revenues = self.db.revenues\nhotels_collection = HotelsDB().collection",
        "detail": "models.hotels",
        "documentation": {}
    },
    {
        "label": "hotels_collection",
        "kind": 5,
        "importPath": "models.hotels",
        "description": "models.hotels",
        "peekOfCode": "hotels_collection = HotelsDB().collection",
        "detail": "models.hotels",
        "documentation": {}
    },
    {
        "label": "RevenueDB",
        "kind": 6,
        "importPath": "models.revenue",
        "description": "models.revenue",
        "peekOfCode": "class RevenueDB:\n    def __init__(self, app):\n        self.mongo = PyMongo(app)\n    def get_all_revenues(self):\n        return list(self.mongo.db.revenues.find({}))\n    def get_revenue_by_id(self, object_id):\n        return self.mongo.db.revenues.find_one({\"_id\": object_id})\n    def calculate_revenue(self, data):\n        room_lodging = data.get(\"room_lodging\", 0)\n        rebate_discount = data.get(\"rebate_discount\", 0)",
        "detail": "models.revenue",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "models.review",
        "description": "models.review",
        "peekOfCode": "client = MongoClient(MONGO_URI)\ndb = client.hotelPerformance  \nreviews_collection = db.reviews",
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "models.review",
        "description": "models.review",
        "peekOfCode": "db = client.hotelPerformance  \nreviews_collection = db.reviews",
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "reviews_collection",
        "kind": 5,
        "importPath": "models.review",
        "description": "models.review",
        "peekOfCode": "reviews_collection = db.reviews",
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "models.sentiment",
        "description": "models.sentiment",
        "peekOfCode": "client = MongoClient(MONGO_URI)\ndb = client.hotelPerformance  \nsentiment_collection = db.sentiments",
        "detail": "models.sentiment",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "models.sentiment",
        "description": "models.sentiment",
        "peekOfCode": "db = client.hotelPerformance  \nsentiment_collection = db.sentiments",
        "detail": "models.sentiment",
        "documentation": {}
    },
    {
        "label": "sentiment_collection",
        "kind": 5,
        "importPath": "models.sentiment",
        "description": "models.sentiment",
        "peekOfCode": "sentiment_collection = db.sentiments",
        "detail": "models.sentiment",
        "documentation": {}
    },
    {
        "label": "create_diagram_blueprint",
        "kind": 2,
        "importPath": "routes.diagram_routes",
        "description": "routes.diagram_routes",
        "peekOfCode": "def create_diagram_blueprint(app):\n    diagram_bp = Blueprint(\"diagrams\", __name__)\n    diagram_bp.add_url_rule(\n        \"/diagram/revenue-sentiment\",\n        \"diagram_revenue_sentiment\",\n        get_revenue_sentiment_diagram,\n        methods=[\"GET\"]\n    )\n    return diagram_bp",
        "detail": "routes.diagram_routes",
        "documentation": {}
    },
    {
        "label": "create_hotel_blueprint",
        "kind": 2,
        "importPath": "routes.hotel_routes",
        "description": "routes.hotel_routes",
        "peekOfCode": "def create_hotel_blueprint(app):\n    hotel_bp = Blueprint(\"hotels\", __name__)\n    db = HotelsDB(app)\n    controller = HotelController(db)\n    hotel_bp.add_url_rule(\"/hotels\", \"get_hotels\", controller.get_hotels, methods=[\"GET\"])\n    hotel_bp.add_url_rule(\"/hotels/<hotel_id>\", \"get_hotel\", controller.get_hotel, methods=[\"GET\"])\n    hotel_bp.add_url_rule(\"/hotels\", \"create_hotel\", controller.create_hotel, methods=[\"POST\"])\n    hotel_bp.add_url_rule(\"/hotels/<hotel_id>\", \"update_hotel\", controller.update_hotel, methods=[\"PUT\"])\n    hotel_bp.add_url_rule(\"/hotels/<hotel_id>\", \"delete_hotel\", controller.delete_hotel, methods=[\"DELETE\"])\n    hotel_bp.add_url_rule(\"/hotels/search\", \"search_hotels\", controller.search_hotels, methods=[\"GET\"])",
        "detail": "routes.hotel_routes",
        "documentation": {}
    },
    {
        "label": "create_revenue_blueprint",
        "kind": 2,
        "importPath": "routes.revenue_routes",
        "description": "routes.revenue_routes",
        "peekOfCode": "def create_revenue_blueprint(app):\n    revenue_bp = Blueprint(\"revenue\", __name__)\n    db = RevenueDB(app)\n    controller = RevenueController(db)\n    revenue_bp.add_url_rule(\"/revenues\", \"get_revenues\", controller.get_revenues, methods=[\"GET\"])\n    revenue_bp.add_url_rule(\"/revenues/<revenue_id>\", \"get_revenue\", controller.get_revenue, methods=[\"GET\"])\n    revenue_bp.add_url_rule(\"/revenues/by-hotel/<hotel_id>\", \"get_revenues_by_hotel\", controller.get_revenues_by_hotel, methods=[\"GET\"])\n    revenue_bp.add_url_rule(\"/revenues\", \"create_revenue\", controller.create_revenue, methods=[\"POST\"])\n    revenue_bp.add_url_rule(\"/revenues/<revenue_id>\", \"edit_revenue\", controller.edit_revenue, methods=[\"PUT\"])\n    revenue_bp.add_url_rule(\"/revenues/<revenue_id>\", \"remove_revenue\", controller.remove_revenue, methods=[\"DELETE\"])",
        "detail": "routes.revenue_routes",
        "documentation": {}
    },
    {
        "label": "create_review_blueprint",
        "kind": 2,
        "importPath": "routes.review_routes",
        "description": "routes.review_routes",
        "peekOfCode": "def create_review_blueprint(app):\n    review_bp = Blueprint(\"reviews\", __name__)\n    @review_bp.route(\"/scrape/<source>\", methods=[\"POST\"])\n    def scrape_reviews(source):\n        data = request.json\n        hotel_id = data.get(\"hotel_id\")\n        if not hotel_id:\n            return jsonify({\"error\": \"hotel_id is required\"}), 400\n        try:\n            hotel_id_obj = ObjectId(hotel_id)",
        "detail": "routes.review_routes",
        "documentation": {}
    },
    {
        "label": "create_sentiment_blueprint",
        "kind": 2,
        "importPath": "routes.sentiment_routes",
        "description": "routes.sentiment_routes",
        "peekOfCode": "def create_sentiment_blueprint(app):\n    sentiments_bp = Blueprint(\"sentiments\", __name__)\n    @sentiments_bp.route(\"/sentiments\", methods=[\"GET\"])\n    def get_sentiments():\n        sentiments = get_all_sentiments()\n        jsonify({\"reviews\": sentiments})\n    return sentiments_bp",
        "detail": "routes.sentiment_routes",
        "documentation": {}
    },
    {
        "label": "CONTRAST_WORDS",
        "kind": 5,
        "importPath": "sentiment_analysis.indonesian_sentiment_lexicon",
        "description": "sentiment_analysis.indonesian_sentiment_lexicon",
        "peekOfCode": "CONTRAST_WORDS = {\"tetapi\", \"namun\", \"tapi\", \"padahal\", \"cuma\", \"sayangnya\"}\nNEGATION_WORDS = {\"tidak\", \"bukan\", \"jangan\", \"tak\"}",
        "detail": "sentiment_analysis.indonesian_sentiment_lexicon",
        "documentation": {}
    },
    {
        "label": "NEGATION_WORDS",
        "kind": 5,
        "importPath": "sentiment_analysis.indonesian_sentiment_lexicon",
        "description": "sentiment_analysis.indonesian_sentiment_lexicon",
        "peekOfCode": "NEGATION_WORDS = {\"tidak\", \"bukan\", \"jangan\", \"tak\"}",
        "detail": "sentiment_analysis.indonesian_sentiment_lexicon",
        "documentation": {}
    },
    {
        "label": "load_words_from_txt",
        "kind": 2,
        "importPath": "sentiment_analysis.sentiment_analysis",
        "description": "sentiment_analysis.sentiment_analysis",
        "peekOfCode": "def load_words_from_txt(path):\n    with open(path, 'r', encoding='utf-8') as file:\n        return set(line.strip().lower() for line in file if line.strip())\nPOSITIVE_WORDS = load_words_from_txt('sentiment_analysis/positive.txt')\nNEGATIVE_WORDS = load_words_from_txt('sentiment_analysis/negative.txt')\ndef analyze_sentiment(text):\n    text = text.lower()\n    words = re.findall(r'\\b\\w+\\b', text)\n    pos_count = sum(1 for word in words if word in POSITIVE_WORDS)\n    neg_count = sum(1 for word in words if word in NEGATIVE_WORDS)",
        "detail": "sentiment_analysis.sentiment_analysis",
        "documentation": {}
    },
    {
        "label": "analyze_sentiment",
        "kind": 2,
        "importPath": "sentiment_analysis.sentiment_analysis",
        "description": "sentiment_analysis.sentiment_analysis",
        "peekOfCode": "def analyze_sentiment(text):\n    text = text.lower()\n    words = re.findall(r'\\b\\w+\\b', text)\n    pos_count = sum(1 for word in words if word in POSITIVE_WORDS)\n    neg_count = sum(1 for word in words if word in NEGATIVE_WORDS)\n    if pos_count > neg_count:\n        sentiment = \"positive\"\n    elif neg_count > pos_count:\n        sentiment = \"negative\"\n    else:",
        "detail": "sentiment_analysis.sentiment_analysis",
        "documentation": {}
    },
    {
        "label": "POSITIVE_WORDS",
        "kind": 5,
        "importPath": "sentiment_analysis.sentiment_analysis",
        "description": "sentiment_analysis.sentiment_analysis",
        "peekOfCode": "POSITIVE_WORDS = load_words_from_txt('sentiment_analysis/positive.txt')\nNEGATIVE_WORDS = load_words_from_txt('sentiment_analysis/negative.txt')\ndef analyze_sentiment(text):\n    text = text.lower()\n    words = re.findall(r'\\b\\w+\\b', text)\n    pos_count = sum(1 for word in words if word in POSITIVE_WORDS)\n    neg_count = sum(1 for word in words if word in NEGATIVE_WORDS)\n    if pos_count > neg_count:\n        sentiment = \"positive\"\n    elif neg_count > pos_count:",
        "detail": "sentiment_analysis.sentiment_analysis",
        "documentation": {}
    },
    {
        "label": "NEGATIVE_WORDS",
        "kind": 5,
        "importPath": "sentiment_analysis.sentiment_analysis",
        "description": "sentiment_analysis.sentiment_analysis",
        "peekOfCode": "NEGATIVE_WORDS = load_words_from_txt('sentiment_analysis/negative.txt')\ndef analyze_sentiment(text):\n    text = text.lower()\n    words = re.findall(r'\\b\\w+\\b', text)\n    pos_count = sum(1 for word in words if word in POSITIVE_WORDS)\n    neg_count = sum(1 for word in words if word in NEGATIVE_WORDS)\n    if pos_count > neg_count:\n        sentiment = \"positive\"\n    elif neg_count > pos_count:\n        sentiment = \"negative\"",
        "detail": "sentiment_analysis.sentiment_analysis",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass\n        tee_f.write(what)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_root_hkey",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU\n        return winreg.HKEY_CURRENT_USER",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "create_shortcut",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def create_shortcut(\n    path, description, filename, arguments=\"\", workdir=\"\", iconpath=\"\", iconindex=0\n):\n    import pythoncom\n    from win32com.shell import shell\n    ilink = pythoncom.CoCreateInstance(\n        shell.CLSID_ShellLink,\n        None,\n        pythoncom.CLSCTX_INPROC_SERVER,\n        shell.IID_IShellLink,",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_special_folder_path",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_special_folder_path(path_name):\n    from win32com.shell import shell, shellcon\n    for maybe in \"\"\"\n        CSIDL_COMMON_STARTMENU CSIDL_STARTMENU CSIDL_COMMON_APPDATA\n        CSIDL_LOCAL_APPDATA CSIDL_APPDATA CSIDL_COMMON_DESKTOPDIRECTORY\n        CSIDL_DESKTOPDIRECTORY CSIDL_COMMON_STARTUP CSIDL_STARTUP\n        CSIDL_COMMON_PROGRAMS CSIDL_PROGRAMS CSIDL_PROGRAM_FILES_COMMON\n        CSIDL_PROGRAM_FILES CSIDL_FONTS\"\"\".split():\n        if maybe == path_name:\n            csidl = getattr(shellcon, maybe)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info.major,\n        sys.version_info.minor,\n        suffix,",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(f\"-> {root_key_name}\\\\{key_name}[{value_name}]={value!r}\")\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(f\"-> DELETE {root_key_name}\\\\{key_name}[{value_name}]\")\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n    to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(f\"Failed to unregister COM objects: {why}\")\n    try:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location: str) -> str:\n    location = os.path.abspath(location)\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError(\n            f'Path \"{location}\" is not an existing directory!'\n        )\n    return location\ndef main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python -m pywin32_postinstall -install\n    * or (shorter but you don't have control over which python environment is used)\n    > pywin32_postinstall -install\n    You need to execute this script, with a '-install' parameter,\n    to ensure the environment is setup correctly to install COM objects, services, etc.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(\n    os.path.join(\n        tempfile.gettempdir(),  # Send output somewhere so it can be found if necessary...\n        \"pywin32_postinstall.log\",\n    ),\n    \"w\",\n)\nclass Tee:\n    def __init__(self, file):\n        self.f = file",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(f\"*** Test script '{script}' exited with {result.returncode}\")\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [project_root] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "project_root",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))\nsite_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\napp.config[\"MONGO_URI\"] = MONGO_URI\nrevenue_bp = create_revenue_blueprint(app)\napp.register_blueprint(revenue_bp)\nreviews_bp = create_review_blueprint(app)\napp.register_blueprint(reviews_bp)  \nsentiments_bp = create_sentiment_blueprint(app)\napp.register_blueprint(sentiments_bp)\nhotels_bp = create_hotel_blueprint(app)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"MONGO_URI\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"MONGO_URI\"] = MONGO_URI\nrevenue_bp = create_revenue_blueprint(app)\napp.register_blueprint(revenue_bp)\nreviews_bp = create_review_blueprint(app)\napp.register_blueprint(reviews_bp)  \nsentiments_bp = create_sentiment_blueprint(app)\napp.register_blueprint(sentiments_bp)\nhotels_bp = create_hotel_blueprint(app)\napp.register_blueprint(hotels_bp)\ndiagram_bp = create_diagram_blueprint(app)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "revenue_bp",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "revenue_bp = create_revenue_blueprint(app)\napp.register_blueprint(revenue_bp)\nreviews_bp = create_review_blueprint(app)\napp.register_blueprint(reviews_bp)  \nsentiments_bp = create_sentiment_blueprint(app)\napp.register_blueprint(sentiments_bp)\nhotels_bp = create_hotel_blueprint(app)\napp.register_blueprint(hotels_bp)\ndiagram_bp = create_diagram_blueprint(app)\napp.register_blueprint(diagram_bp)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "reviews_bp",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "reviews_bp = create_review_blueprint(app)\napp.register_blueprint(reviews_bp)  \nsentiments_bp = create_sentiment_blueprint(app)\napp.register_blueprint(sentiments_bp)\nhotels_bp = create_hotel_blueprint(app)\napp.register_blueprint(hotels_bp)\ndiagram_bp = create_diagram_blueprint(app)\napp.register_blueprint(diagram_bp)\nif __name__ == \"__main__\":\n    app.run(debug=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "sentiments_bp",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "sentiments_bp = create_sentiment_blueprint(app)\napp.register_blueprint(sentiments_bp)\nhotels_bp = create_hotel_blueprint(app)\napp.register_blueprint(hotels_bp)\ndiagram_bp = create_diagram_blueprint(app)\napp.register_blueprint(diagram_bp)\nif __name__ == \"__main__\":\n    app.run(debug=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "hotels_bp",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "hotels_bp = create_hotel_blueprint(app)\napp.register_blueprint(hotels_bp)\ndiagram_bp = create_diagram_blueprint(app)\napp.register_blueprint(diagram_bp)\nif __name__ == \"__main__\":\n    app.run(debug=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "diagram_bp",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "diagram_bp = create_diagram_blueprint(app)\napp.register_blueprint(diagram_bp)\nif __name__ == \"__main__\":\n    app.run(debug=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "MONGO_URI",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "MONGO_URI = \"mongodb+srv://williamongkywow:williamongkywow@clusterta.poz3g.mongodb.net/hotelPerformance\"",
        "detail": "config",
        "documentation": {}
    }
]